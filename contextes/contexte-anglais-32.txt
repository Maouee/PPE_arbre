     * Introduction to Tree - Data Structure and Algorithm Tutorials
     * Tree Traversal Techniques - Data Structure and Algorithm Tutorials
     * Applications of tree data structure
     * Applications, Advantages and Disadvantages of Tree
     * Difference between an array and a tree
     * Inorder Tree Traversal without Recursion
     * Types of Trees in Data Structures
--
AVL Tree

B tree and B+ tree

Red Black Tree
--
     * Introduction to Tree - Data Structure and Algorithm Tutorials
     * Tree Traversal Techniques - Data Structure and Algorithm Tutorials
     * Applications of tree data structure
     * Applications, Advantages and Disadvantages of Tree
     * Difference between an array and a tree
     * Inorder Tree Traversal without Recursion
     * Types of Trees in Data Structures
--
AVL Tree

B tree and B+ tree

Red Black Tree
--
   Report

     A tree data structure is a hierarchical structure that is used to
     represent and organize data in a way that is easy to navigate and
     search. It is a collection of nodes that are connected by edges and has
     a hierarchical relationship between the nodes. 

     The topmost node of the tree is called the root, and the nodes below it
     are called the child nodes. Each node can have multiple child nodes, and
     these child nodes can also have their own child nodes, forming a
--
   the computer to be used more effectively. It consists of a central node,
   structural nodes, and sub-nodes, which are connected via edges. We can
   also say that tree data structure has roots, branches, and leaves
   connected with one another.

--
       called the child node of that node. Examples: {D, E} are the child
       nodes of {B}.
     * Root Node: The topmost node of a tree or the node which does not have
       any parent node is called the root node. {A} is the root node of the
       tree. A non-empty tree must contain exactly one root node and exactly
       one path from the root to all other nodes of the tree.
     * Leaf Node or External Node: The nodes which do not have any child
       nodes are called leaf nodes. {K, L, M, N, O, P, G} are the leaf nodes
       of the tree.
     * Ancestor of a Node: Any predecessor nodes on the path of the root to
       that node are called Ancestors of that node. {A,B} are the ancestor
--
     * Neighbour of a Node: Parent or child nodes of that node are called
       neighbors of that node.
     * Subtree: Any node of the tree along with its descendant.

Representation of Tree Data Structure:

     A tree consists of a root, and zero or more subtrees T_1, T_2, … , T_k
     such that there is an edge from the root of the tree to the root of each
     subtree.

   Representation of Tree Data Structure
--
   Types of Trees in Data Structure based on the number of children

     * Binary tree: In a binary tree, each node can have a maximum of two
       children linked to it. Some common types of binary trees include full
       binary trees, complete binary trees, balanced binary trees, and
       degenerate or pathological binary trees.
     * Ternary Tree: A Ternary Tree is a tree data structure in which each
       node has at most three child nodes, usually distinguished as “left”,
       “mid” and “right”.
     * N-ary Tree or Generic Tree: Generic trees are a collection of nodes
       where each node is a data structure that consists of records and a
       list of references to its children(duplicate references are not
--
       multiple nodes.

   To learn more about types of trees, refer to this article.

Basic Operation Of Tree Data Structure:

     * Create – create a tree in the data structure.
     * Insert − Inserts data in a tree.
     * Search − Searches specific data in a tree to check whether it is
       present or not.
     * Traversal:
          * Preorder Traversal – perform Traveling a tree in a pre-order
            manner in the data structure.
          * In order Traversal – perform Traveling a tree in an in-order
            manner.
          * Post-order Traversal –perform Traveling a tree in a post-order
            manner.

--
       // Number of nodes                                      
       int N = 7, Root = 1;                                    
       // Adjacency list to store the tree                     
       vector<vector<int> > adj(N + 1, vector<int>());         
       // Creating the tree                                    
       addEdge(1, 2, adj);                                     
       addEdge(1, 3, adj);                                     
--
       printChildren(Root, adj);                               
                                                               
       // Printing the leaf nodes in the tree                  
       cout << "The leaf nodes of the tree are:" << endl;      
       printLeafNodes(Root, adj);                              
                                                               
--
           int N = 7, Root = 1;                                 
                                                                
           // Adjacency list to store the tree                  
           Vector<Vector<Integer> > adj                         
               = new Vector<Vector<Integer> >();                
--
           }                                                    
                                                                
           // Creating the tree                                 
           adj.get(1).add(2);                                   
           adj.get(2).add(1);                                   
--
           printChildren(Root, adj);                            
                                                                
           // Printing the leaf nodes in the tree               
           System.out.println(                                  
               "The leaf nodes of the tree are:");              
           printLeafNodes(Root, adj);                           
                                                                
--
   Root = 1                                                   
                                                              
   # Adjacency list to store the tree                         
   adj = []                                                   
   for i in range(0, N+1):                                    
       adj.append([])                                         
                                                              
   # Creating the tree                                        
   adj[1].append(2)                                           
   adj[2].append(1)                                           
--
   printChildren(Root, adj)                                   
                                                              
   # Printing the leaf nodes in the tree                      
   print("The leaf nodes of the tree are:")                   
   printLeafNodes(Root, adj)                                  
                                                              
--
           // Number of nodes                                   
           int n = 7, root = 1;                                 
           // Adjacency list to store the tree                  
           var adj = new List<List<int> >();                    
           for (int i = 0; i <= n; i++)                         
               adj.Add(new List<int>());                        
           // Creating the tree                                 

Javascript
--
   let N = 7, Root = 1;                                        
                                                               
   // Adjacency list to store the tree                         
   let adj = new Array(N + 1).fill(null).map(() => []);        
                                                               
   // Creating the tree                                        
   addEdge(1, 2, adj);                                         
   addEdge(1, 3, adj);                                         
--
   printChildren(Root, adj);                                   
                                                               
   // Printing the leaf nodes in the tree                      
   console.log("The leaf nodes of the tree are:");             
   printLeafNodes(Root, adj);                                  
                                                               
--
 6->
 7->
 The leaf nodes of the tree are:
 3 5 6 7
 The degrees of each node are:
--
Why Tree is considered a non-linear data structure?

   The data in a tree are not stored in a sequential manner i.e., they are
   not stored linearly. Instead, they are arranged on multiple levels or we
   can say it is a hierarchical structure. For this reason, the tree is
   considered to be a non-linear data structure.

--

     * Number of edges: An edge can be defined as the connection between two
       nodes. If a tree has N nodes then it will have (N-1) edges. There is
       only one path from each node to any other node of the tree.
     * Depth of a node: The depth of a node is defined as the length of the
       path from the root to that node. Each edge adds 1 unit of length to
       the path. So, it can also be defined as the number of edges in the
       path from the root of the tree to the node.
     * Height of a node: The height of a node can be defined as the length of
       the longest path from the node to a leaf node of the tree.
     * Height of the Tree: The height of a tree is the length of the longest
       path from the root of the tree to a leaf node of the tree.
     * Degree of a Node: The total count of subtrees attached to that node is
       called the degree of the node. The degree of a leaf node must be 0.
       The degree of a tree is the maximum degree of a node among all the
       nodes in the tree.

Need for Tree Data Structure

   1. One reason to use trees might be because you want to store information
   that naturally forms a hierarchy. For example, the file system on a
   computer: 
--
       files.
     * Data Compression: Huffman coding is a popular technique for data
       compression that involves constructing a binary tree where the leaves
       represent characters and their frequency of occurrence. The resulting
       tree is used to encode the data in a way that minimizes the amount of
       storage required.
     * Compiler Design: In compiler design, a syntax tree is used to
       represent the structure of a program. 
     * Database Indexing: B-trees and other tree structures are used in
       database indexing to efficiently search for and retrieve data. 

--
Advantages of Tree Data Structure:

     * Tree offer Efficient Searching Depending on the type of tree, with
       average search times of O(log n) for balanced trees like AVL. 
     * Trees provide a hierarchical representation of data, making it easy to
       organize and navigate large amounts of information.
     * The recursive nature of trees makes them easy to traverse and
       manipulate using recursive algorithms.

--
Disadvantages of Tree Data Structure:

     * Unbalanced Trees, meaning that the height of the tree is skewed
       towards one side, which can lead to inefficient search times.
     * Trees demand more memory space requirements than some other data
       structures like arrays and linked lists, especially if the tree is
       very large.
     * The implementation and manipulation of trees can be complex and
       require a good understanding of the algorithms.

--

   Similar Reads
   Introduction to Finger search tree Data Structure
   Introduction to Hierarchical Data Structure
   AVL Tree Data Structure
   Applications of tree data structure
   Tree Data Structure
   Complexity of different operations in Binary tree, Binary Search Tree and
   AVL tree
   Maximum sub-tree sum in a Binary Tree such that the sub-tree is also a BST
   Convert a Generic Tree(N-array Tree) to Binary Tree
   Convert a Binary Tree into its Mirror Tree (Invert Binary Tree)
