     * 1 Applications
     * 2 Terminology
     * 3 Examples of trees and non-trees
     * 4 Common operations
          * 4.1 Traversal and search methods
--
     * Wikibooks
   From Wikipedia, the free encyclopedia
   Not to be confused with Trie, a specific type of tree data structure.
   [IMG]This unsorted tree has non-unique values (e.g., the value 2 existing
   in different nodes, not in a single node only) and is non-binary (only up
   to two children nodes per parent node in a binary tree). The root node at
   the top (with the value 2 here), has no parent as it is the highest in the
   tree hierarchy.

   In computer science, a tree is a widely used abstract data type that
   represents a hierarchical tree structure with a set of connected nodes.
   Each node in the tree can be connected to many children (depending on the
   type of tree), but must be connected to exactly one parent,^[1] except for
   the root node, which has no parent (i.e., the root node as the top-most
   node in the tree hierarchy). These constraints mean there are no cycles or
   "loops" (no node can be its own ancestor), and also that each child can be
   treated like the root node of its own subtree, making recursion a useful
   technique for tree traversal. In contrast to linear data structures, many
   trees cannot be represented by relationships between neighboring nodes
   (parent and children nodes of a node under consideration if they exists)
   in a single straight line (called edge or link between two adjacent
   nodes).

   Binary trees are a commonly used type, which constrain the number of
   children for each parent to at most two. When the order of the children is
   specified, this data structure corresponds to an ordered tree in graph
   theory. A value or pointer to other data may be associated with every node
   in the tree, or sometimes only with the leaf nodes, which have no children
   nodes.

--

   Trees as used in computing are similar to but can be different from
   mathematical constructs of trees in graph theory, trees in set theory, and
   trees in descriptive set theory.

Applications[edit]
--
     * File systems for:
          * Directory structure used to organize subdirectories and files
            (symbolic links create non-tree graphs, as do multiple hard links
            to the same file or directory)
          * The mechanism used to allocate and link blocks of data on the
            storage device
     * Class hierarchy or "inheritance tree" showing the relationships among
       classes in object-oriented programming; multiple inheritance produces
       non-tree graphs
     * Abstract syntax trees for computer languages
     * Natural language processing:
          * Parse trees
          * Modeling utterances in a generative grammar
          * Dialogue tree for generating conversations
     * Document Object Models ("DOM tree") of XML and HTML documents
     * Search trees store data in a way that makes an efficient search
       algorithm possible via tree traversal
          * A binary search tree is a type of binary tree
     * Representing sorted lists of data
     * Computer-generated imagery:
          * Space partitioning, including binary space partitioning
          * Digital compositing
     * Storing Barnes–Hut trees used to simulate galaxies
     * Implementing heaps
     * Nested set collections
--

     * Paths through an arbitrary node-and-edge graph (including
       multigraphs), by making multiple nodes in the tree for each graph node
       used in multiple paths
     * Any mathematical hierarchy
--
     * The contents of hierarchical namespaces

   JSON and YAML documents can be thought of as trees, but are typically
   represented by nested lists and dictionaries.

--

   A node is a structure which may contain data and connections to other
   nodes, sometimes called edges or links. Each node in a tree has zero or
   more child nodes, which are below it in the tree (by convention, trees are
   drawn with descendants going downwards). A node that has a child is called
   the child's parent node (or superior). All nodes have exactly one parent,
--
   ancestor nodes, such as the parent's parent. Child nodes with the same
   parent are sibling nodes. Typically siblings have an order, with the first
   one conventionally drawn on the left. Some definitions allow a tree to
   have no nodes at all, in which case it is called empty.

   An internal node (also known as an inner node, inode for short, or branch
   node) is any node of a tree that has child nodes. Similarly, an external
   node (also known as an outer node, leaf node, or terminal node) is any
   node that does not have child nodes.

   The height of a node is the length of the longest downward path to a leaf
   from that node. The height of the root is the height of the tree. The
   depth of a node is the length of the path to its root (i.e., its root
   path). Thus the root node has depth zero, leaf nodes have height zero, and
   a tree with only a single node (hence both a root and leaf) has depth and
   height zero. Conventionally, an empty tree (tree with no nodes, if such
   are allowed) has height −1.

   Each non-root node can be treated as the root node of its own subtree,
   which includes that node and all its descendants.^[a]^[2]

   Other terms used with trees:

   Neighbor
--
           has degree zero.

   Degree of tree
           The degree of a tree is the maximum degree of a node in the tree.

   Distance
--

   Forest
           A set of one or more disjoint trees.

   Ordered tree
           A rooted tree in which an ordering is specified for the children
           of each vertex. The book The Art of Computer Programming uses the
           term oriented tree.^[4]

   Size of a tree
           Number of nodes in the tree.

Examples of trees and non-trees[edit]

   [IMG]
   Not a tree: two non-connected parts, A→B and C→D→E. There is more than one
   root.
   [IMG]
   Not a tree: undirected cycle 1-2-4-3. 4 has more than one parent (inbound
   edge).
   [IMG]
   Not a tree: cycle B→C→E→D→B. B has more than one parent (inbound edge).
   [IMG]
   Not a tree: cycle A→A. A is the root but it also has a parent.
   [IMG]
   Each linear list is trivially a tree.

Common operations[edit]

     * Enumerating all the items
     * Enumerating a section of a tree
     * Searching for an item
     * Adding a new item at a certain position on the tree
     * Deleting an item
     * Pruning: Removing a whole section of a tree
     * Grafting: Adding a whole section to a tree
     * Finding the root for any node
     * Finding the lowest common ancestor of two nodes
--
   Main article: Tree traversal

   Stepping through the items of a tree, by means of the connections between
   parents and children, is called walking the tree, and the action is a walk
   of the tree. Often, an operation might be performed when a pointer arrives
   at a particular node. A walk in which each parent node is traversed before
   its children is called a pre-order walk; a walk in which the children are
   traversed before their respective parents are traversed is called a
   post-order walk; a walk in which a node's left subtree, then the node
   itself, and finally its right subtree are traversed is called an in-order
   traversal. (This last scenario, referring to exactly two subtrees, a left
   subtree and a right subtree, assumes specifically a binary tree.) A
   level-order walk effectively performs a breadth-first search over the
   entirety of a tree; nodes are traversed level by level, where the root
   node is visited first, followed by its direct child nodes and their
   siblings, followed by its grandchild nodes and their siblings, etc., until
   all nodes in the tree have been traversed.

Representations[edit]

   There are many different ways to represent trees. In working memory, nodes
   are typically dynamically allocated records with pointers to their
   children, their parents, or both, as well as any associated data. If of a
--
   them determined by their positions in the array (as in a binary heap).

   A binary tree can be implemented as a list of lists: the head of a list
   (the value of the first term) is the left child (subtree), while the tail
   (the list of second and subsequent terms) is the right child (subtree).
   This can be modified to allow values as well, as in Lisp S-expressions,
   where the head (value of first term) is the value of the node, the head of
--
   tail (list of third and subsequent terms) is the right child.

   Ordered trees can be naturally encoded by finite sequences, for example
   with natural numbers.^[5]

--
         remove this template message)                                        

   As an abstract data type, the abstract tree type T with values of some
   type E is defined, using the abstract forest type F (list of trees), by
   the functions:

--
           children(node(e, f)) = f

   In terms of type theory, a tree is an inductive type defined by the
   constructors nil (empty forest) and node (tree with root node with given
   value and children).

--
         remove this template message)                                        

   Viewed as a whole, a tree data structure is an ordered tree, generally
   with values attached to each node. Concretely, it is (if required to be
   non-empty):

     * A rooted tree with the "away from root" direction (a more narrow term
       is an "arborescence"), meaning:
          * A directed graph,
          * whose underlying undirected graph is a tree (any two vertices are
            connected by exactly one simple path),
          * with a distinguished root (one vertex is designated as the root),
--
     * a value (of some data type) at each node.

   Often trees have a fixed (more properly, bounded) branching factor
   (outdegree), particularly always having two child nodes (possibly empty,
   hence at most two non-empty child nodes), hence a "binary tree".

   Allowing empty trees makes some definitions simpler, some more
   complicated: a rooted tree must be non-empty, hence if empty trees are
   allowed the above definition instead becomes "an empty tree or a rooted
   tree such that ...". On the other hand, empty trees simplify defining
   fixed branching factor: with empty trees allowed, a binary tree is a tree
   such that every node has exactly two children, each of which is a tree
   (possibly empty). The complete sets of operations on the tree must include
   the fork operation.^[clarification needed]

--
     * Tree structure (general)
     * Category:Trees (data structures) (catalogs types of computational
       trees)

Notes[edit]

    1. ^ This is different from the formal definition of subtree used in
       graph theory, which is a subgraph that forms a tree – it need not
       include all descendants. For example, the root node by itself is a
       subtree in the graph theory sense, but not in the data structure sense
       (unless there are no descendants).

--
       multiple parents. If a child node has multiple parents, then it is
       what we call a graph.
    2. ^ Weisstein, Eric W. "Subtree". MathWorld.
    3. ^ Susanna S. Epp (Aug 2010). Discrete Mathematics with Applications.
       Pacific Grove, CA: Brooks/Cole Publishing Co. p. 694.
       ISBN 978-0-495-39132-6.
    4. ^ Donald Knuth (1997). "Section 2.3.4.2: Oriented trees". The Art of
       Computer Programming. Vol. 1: Fundamental Algorithms (Third ed.).
       Addison-Wesley. p. 373.
    5. ^ L. Afanasiev; P. Blackburn; I. Dimitriou; B. Gaiffe; E. Goris; M.
       Marx; M. de Rijke (2005). "PDL for ordered trees" (PDF). Journal of
       Applied Non-Classical Logics. 15 (2): 115–135.
       doi:10.3166/jancl.15.115-135. S2CID 1979330.
--
       Stein. Introduction to Algorithms, Second Edition. MIT Press and
       McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 10.4: Representing
       rooted trees, pp. 214–217. Chapters 12–14 (Binary Search Trees,
       Red–Black Trees, Augmenting Data Structures), pp. 253–320.

--
                                       * B*                         
                                       * B^x                        
   Search trees                        * (Optimal) Binary search    
   (dynamic sets/associative arrays)   * Dancing                    
                                       * HTree                      
--
                                       * Metric                     
                                       * MVP                        
   Spatial data partitioning trees     * Octree                     
                                       * PH                         
                                       * Priority R                 
--
                                       * Fenwick                    
                                       * Finger                     
                                       * Fractal tree index         
                                       * Fusion                     
                                       * Hash calendar              
                                       * iDistance                  
   Other trees                         * K-ary                      
                                       * Left-child right-sibling   
                                       * Link/cut                   
--
     * t                 
     * e                 
   Graph and tree traversal algorithms
                           * α–β pruning                
                           * A*                         
--
                           * Fringe search              
                           * Jump point search          
                           * Monte Carlo tree search    
                           * SSS*                       
                           * Bellman–Ford               
--
                           * Yen's                      
                           * Borůvka's                  
   Minimum spanning tree   * Kruskal's                  
                           * Prim's                     
                           * Reverse-delete             
--
   Arrays     * Dynamic array                      
              * Hash table                         
              * Hashed array tree                  
              * Sparse matrix                      
              * Association list                   
--
              * Unrolled linked list               
              * XOR linked list                    
              * B-tree                             
              * Binary search tree                 
                   * AA tree                       
                   * AVL tree                      
                   * Red–black tree                
                   * Self-balancing tree           
                   * Splay tree                    
              * Heap                               
   Trees           * Binary heap                   
                   * Binomial heap                 
                   * Fibonacci heap                
              * R-tree                             
                   * R* tree                       
                   * R+ tree                       
                   * Hilbert R-tree                
              * Trie                               
                   * Hash tree                     
              * Binary decision diagram            
   Graphs     * Directed acyclic graph             
