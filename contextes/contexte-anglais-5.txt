   for classification and regression. The goal is to create a model that
   predicts the value of a target variable by learning simple decision rules
   inferred from the data features. A tree can be seen as a piecewise
   constant approximation.

   For instance, in the example below, decision trees learn from data to
   approximate a sine curve with a set of if-then-else decision rules. The
   deeper the tree, the more complex the decision rules and the fitter the
   model.

   ../_images/sphx_glr_plot_tree_regression_001.png

   Some advantages of decision trees are:

       * Simple to understand and to interpret. Trees can be visualized.
--
       * Requires little data preparation. Other techniques often require
         data normalization, dummy variables need to be created and blank
         values to be removed. Some tree and algorithm combinations support
         missing values.

       * The cost of using the tree (i.e., predicting data) is logarithmic in
         the number of data points used to train the tree.

       * Able to handle both numerical and categorical data. However, the
--
         true model from which the data were generated.

   The disadvantages of decision trees include:

       * Decision-tree learners can create over-complex trees that do not
         generalize the data well. This is called overfitting. Mechanisms
         such as pruning, setting the minimum number of samples required at a
         leaf node or setting the maximum depth of the tree are necessary to
         avoid this problem.

       * Decision trees can be unstable because small variations in the data
         might result in a completely different tree being generated. This
         problem is mitigated by using decision trees within an ensemble.

       * Predictions of decision trees are neither smooth nor continuous, but
         piecewise constant approximations as seen in the above figure.
         Therefore, they are not good at extrapolation.

       * The problem of learning an optimal decision tree is known to be
         NP-complete under several aspects of optimality and even for simple
         concepts. Consequently, practical decision-tree learning algorithms
         are based on heuristic algorithms such as the greedy algorithm where
         locally optimal decisions are made at each node. Such algorithms
         cannot guarantee to return the globally optimal decision tree. This
         can be mitigated by training multiple trees in an ensemble learner,
         where the features and samples are randomly sampled with
         replacement.

       * There are concepts that are hard to learn because decision trees do
         not express them easily, such as XOR, parity or multiplexer
         problems.

       * Decision tree learners create biased trees if some classes dominate.
         It is therefore recommended to balance the dataset prior to fitting
         with the decision tree.

1.10.1. Classification¶
--
   (n_samples,), holding the class labels for the training samples:

 >>> from sklearn import tree
 >>> X = [[0, 0], [1, 1]]
 >>> Y = [0, 1]
 >>> clf = tree.DecisionTreeClassifier()
 >>> clf = clf.fit(X, Y)

--
   classification.

   Using the Iris dataset, we can construct a tree as follows:

 >>> from sklearn.datasets import load_iris
 >>> from sklearn import tree
 >>> iris = load_iris()
 >>> X, y = iris.data, iris.target
 >>> clf = tree.DecisionTreeClassifier()
 >>> clf = clf.fit(X, y)

   Once trained, you can plot the tree with the plot_tree function:

 >>> tree.plot_tree(clf)
 [...]

   ../_images/sphx_glr_plot_iris_dtc_002.png

   Alternative ways to export trees Click for more details

   We can also export the tree in Graphviz format using the export_graphviz
   exporter. If you use the conda package manager, the graphviz binaries and
   the python package can be installed with conda install python-graphviz.
--
   install graphviz.

   Below is an example graphviz export of the above tree trained on the
   entire iris dataset; the results are saved in an output file iris.pdf:

 >>> import graphviz
 >>> dot_data = tree.export_graphviz(clf, out_file=None)
 >>> graph = graphviz.Source(dot_data)
 >>> graph.render("iris")
--
   render these plots inline automatically:

 >>> dot_data = tree.export_graphviz(clf, out_file=None,
 ...                      feature_names=iris.feature_names, 
 ...                      class_names=iris.target_names, 
--
   ../_images/iris.svg ../_images/sphx_glr_plot_iris_dtc_001.png

   Alternatively, the tree can also be exported in textual format with the
   function export_text. This method doesn’t require the installation of
   external libraries and is more compact:

 >>> from sklearn.datasets import load_iris
 >>> from sklearn.tree import DecisionTreeClassifier
 >>> from sklearn.tree import export_text
 >>> iris = load_iris()
 >>> decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)
 >>> decision_tree = decision_tree.fit(iris.data, iris.target)
 >>> r = export_text(decision_tree, feature_names=iris['feature_names'])
 >>> print(r)
 |--- petal width (cm) <= 0.80
--
   Examples:

     * Plot the decision surface of decision trees trained on the iris
       dataset

     * Understanding the decision tree structure

1.10.2. Regression¶

   ../_images/sphx_glr_plot_tree_regression_001.png

   Decision trees can also be applied to regression problems, using the
   DecisionTreeRegressor class.

--
   point values instead of integer values:

 >>> from sklearn import tree
 >>> X = [[0, 0], [2, 2]]
 >>> y = [0.5, 2.5]
 >>> clf = tree.DecisionTreeRegressor()
 >>> clf = clf.fit(X, y)
 >>> clf.predict([[1, 1]])
--
   estimator may often be increased.

   With regard to decision trees, this strategy can readily be used to
   support multi-output problems. This requires the following changes:

--
   This module offers support for multi-output problems by implementing this
   strategy in both DecisionTreeClassifier and DecisionTreeRegressor. If a
   decision tree is fit on an output array Y of shape (n_samples, n_outputs)
   then the resulting estimator will:

--
         predict_proba.

   The use of multi-output trees for regression is demonstrated in
   Multi-output Decision Tree Regression. In this example, the input X is a
   single real value and the outputs Y are the sine and cosine of X.

   ../_images/sphx_glr_plot_tree_regression_multioutput_001.png

   The use of multi-output trees for classification is demonstrated in Face
   completion with a multi-output estimators. In this example, the inputs X
   are the pixels of the upper half of faces and the outputs Y are the pixels
--

       * M. Dumont et al, Fast multi-class image annotation with random
         subwindows and multiple output randomized trees, International
         Conference on Computer Vision Theory and Applications 2009

1.10.4. Complexity¶

   In general, the run time cost to construct a balanced binary tree is
   \(O(n_{samples}n_{features}\log(n_{samples}))\) and query time
   \(O(\log(n_{samples}))\). Although the tree construction algorithm
   attempts to generate balanced trees, they will not always be balanced.
   Assuming that the subtrees remain approximately balanced, the cost at each
   node consists of searching through \(O(n_{features})\) to find the feature
   that offers the largest reduction in the impurity criterion, e.g. log loss
   (which is equivalent to an information gain). This has a cost of
   \(O(n_{features}n_{samples}\log(n_{samples}))\) at each node, leading to a
   total cost over the entire trees (by summing the cost at each node) of
   \(O(n_{features}n_{samples}^{2}\log(n_{samples}))\).

1.10.5. Tips on practical use¶

       * Decision trees tend to overfit on data with a large number of
         features. Getting the right ratio of samples to number of features
         is important, since a tree with few samples in high dimensional
         space is very likely to overfit.

       * Consider performing dimensionality reduction (PCA, ICA, or Feature
         selection) beforehand to give your tree a better chance of finding
         features that are discriminative.

       * Understanding the decision tree structure will help in gaining more
         insights about how the decision tree makes predictions, which is
         important for understanding the important features in the data.

       * Visualize your tree as you are training by using the export
         function. Use max_depth=3 as an initial tree depth to get a feel for
         how the tree is fitting to your data, and then increase the depth.

       * Remember that the number of samples required to populate the tree
         doubles for each additional level the tree grows to. Use max_depth
         to control the size of the tree to prevent overfitting.

       * Use min_samples_split or min_samples_leaf to ensure that multiple
         samples inform every decision in the tree, by controlling which
         splits will be considered. A very small number will usually mean the
         tree will overfit, whereas a large number will prevent the tree from
         learning the data. Try min_samples_leaf=5 as an initial value. If
         the sample size varies greatly, a float number can be used as
--
         accounting for sample weights is required at splits.

       * Balance your dataset before training to prevent the tree from being
         biased toward the classes that are dominant. Class balancing can be
         done by sampling an equal number of samples from each class, or
--
         are not aware of the sample weights, like min_samples_leaf.

       * If the samples are weighted, it will be easier to optimize the tree
         structure using weight-based pre-pruning criterion such as
         min_weight_fraction_leaf, which ensure that leaf nodes contain at
         least a fraction of the overall sum of the sample weights.

       * All decision trees use np.float32 arrays internally. If training
         data is not in this format, a copy of the dataset will be made.

--
1.10.6. Tree algorithms: ID3, C4.5, C5.0 and CART¶

   What are all the various decision tree algorithms and how do they differ
   from each other? Which one is implemented in scikit-learn?

   Various decision tree algorithms Click for more details

   ID3 (Iterative Dichotomiser 3) was developed in 1986 by Ross Quinlan. The
   algorithm creates a multiway tree, finding for each node (i.e. in a greedy
   manner) the categorical feature that will yield the largest information
   gain for categorical targets. Trees are grown to their maximum size and
   then a pruning step is usually applied to improve the ability of the tree
   to generalize to unseen data.

--
   must be categorical by dynamically defining a discrete attribute (based on
   numerical variables) that partitions the continuous attribute value into a
   discrete set of intervals. C4.5 converts the trained trees (i.e. the
   output of the ID3 algorithm) into sets of if-then rules. The accuracy of
   each rule is then evaluated to determine the order in which they should be
--
   CART (Classification and Regression Trees) is very similar to C4.5, but it
   differs in that it supports numerical target variables (regression) and
   does not compute rule sets. CART constructs binary trees using the feature
   and threshold that yield the largest information gain at each node.

--

   Given training vectors \(x_i \in R^n\), i=1,…, l and a label vector \(y
   \in R^l\), a decision tree recursively partitions the feature space such
   that the samples with the same labels or similar target values are grouped
   together.
--
     classes. It takes the class frequencies of the training data points that
     reached a given leaf \(m\) as their probability. Using the Shannon
     entropy as tree node splitting criterion is equivalent to minimizing the
     log loss (also known as cross-entropy and multinomial deviance) between
     the true labels \(y_i\) and the probabilistic predictions \(T_k(x_i)\)
     of the tree model \(T\) for class \(k\).

     To see this, first recall that the log loss of a tree model \(T\)
     computed on a dataset \(D\) is defined as follows:

--
     where \(D\) is a training dataset of \(n\) pairs \((x_i, y_i)\).

     In a classification tree, the predicted class probabilities within leaf
     nodes are constant, that is: for all \((x_i, y_i) \in Q_m\), one has:
     \(T_k(x_i) = p_{mk}\) for each class \(k\).
--
         classified with the class used in the split found during training:

 >>> from sklearn.tree import DecisionTreeClassifier
 >>> import numpy as np

--
 >>> y = [0, 0, 1, 1]

 >>> tree = DecisionTreeClassifier(random_state=0).fit(X, y)
 >>> tree.predict(X)
 array([0, 0, 1, 1])

--
         values go to one child and non-missing values go to the other:

 >>> from sklearn.tree import DecisionTreeClassifier
 >>> import numpy as np

--
 >>> y = [0, 0, 1, 1]

 >>> tree = DecisionTreeClassifier(random_state=0).fit(X, y)

 >>> X_test = np.array([np.nan]).reshape(-1, 1)
 >>> tree.predict(X_test)
 array([1])

--
         the most samples:

 >>> from sklearn.tree import DecisionTreeClassifier
 >>> import numpy as np

--
 >>> y = [0, 1, 1, 1]

 >>> tree = DecisionTreeClassifier(random_state=0).fit(X, y)

 >>> X_test = np.array([np.nan]).reshape(-1, 1)
 >>> tree.predict(X_test)
 array([1])

1.10.9. Minimal Cost-Complexity Pruning¶

   Minimal cost-complexity pruning is an algorithm used to prune a tree to
   avoid over-fitting, described in Chapter 3 of [BRE]. This algorithm is
   parameterized by \(\alpha\ge0\) known as the complexity parameter. The
   complexity parameter is used to define the cost-complexity measure,
   \(R_\alpha(T)\) of a given tree \(T\):

   \[R_\alpha(T) = R(T) + \alpha|\widetilde{T}|\]
--
   weighted impurity of the terminal nodes for \(R(T)\). As shown above, the
   impurity of a node depends on the criterion. Minimal cost-complexity
   pruning finds the subtree of \(T\) that minimizes \(R_\alpha(T)\).

   The cost complexity measure of a single node is
   \(R_\alpha(t)=R(t)+\alpha\). The branch, \(T_t\), is defined to be a tree
   where node \(t\) is its root. In general, the impurity of a node is
   greater than the sum of impurities of its terminal nodes, \(R(T_t)<R(t)\).
--
   \(\alpha_{eff}(t)=\frac{R(t)-R(T_t)}{|T|-1}\). A non-terminal node with
   the smallest value of \(\alpha_{eff}\) is the weakest link and will be
   pruned. This process stops when the pruned tree’s minimal \(\alpha_{eff}\)
   is greater than the ccp_alpha parameter.

   Examples:

     * Post pruning decision trees with cost complexity pruning

   References Click for more details
--
     Regression Trees. Wadsworth, Belmont, CA, 1984.

       * https://en.wikipedia.org/wiki/Decision_tree_learning

       * https://en.wikipedia.org/wiki/Predictive_analytics
