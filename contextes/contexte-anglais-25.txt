                      How Database B-Tree Indexing Works 

   B-tree is used for indexing and is a data structure that provides sorted
   data and allows searches, sequential access, attachments and removals in
   sorted order. 
--
   worked as a developer since 2015 and has previously served as a software
   engineer for Zeptolytics.
   Image of an oak tree representing b-tree indexing [IMG]
   Image: Shutterstock / Built In

--
B-Tree Indexing Explained

   B-tree indexing is the process of sorting large blocks of data to make
   searching through that data faster and easier. A B-tree stores data such
   that each node contains keys in ascending order. Each of these keys has
   two references to another two child nodes. The left side child node keys
--
    

What Is B-tree?

   A B-tree is a data structure that provides sorted data and allows
   searches, sequential access, attachments and removals in sorted order. The
   B-tree is highly capable of storing systems that write large blocks of
   data. The B-tree simplifies the binary search tree by allowing nodes with
   more than two children. Below is a B-tree example.

   Illustration of a b-treeIllustration of a B-tree index. | Image: Dhanushka
   Madushan

   B-tree stores data such that each node contains keys in ascending order.
   Each of these keys has two references to another two child nodes. The left
   side child node keys are less than the current keys, and the right side
--
   search to all elements. | Image: Dhanushka Madushan

   Look familiar? It’s a binary tree. This is the simplest form of the
   B-tree. For a binary tree, we can use pointers instead of keeping data in
   a sorted array. Mathematically, we can prove that the worst case search
   time for a binary tree is O(log(n)). 

   The concept of Binary tree can be extended into a more generalized form,
   which is known as B-tree. Instead of having a single entry for a single
   node, B-tree uses an array of entries for a single node and has references
   to a child node for each of these entries. Below are some time complexity
   comparisons of each pre-described method.
--
B+Tree vs. B-Tree: What’s the Difference?

   B+ tree is another data structure that’s used to store data and looks
   almost the same as the B-tree. The only difference is that B+ tree stores
   data on the leaf nodes. This means that all non-leaf node values are
   duplicated in leaf nodes again. Below is a sample B+tree.

   An illustration of a B+treeAn illustration of a B+tree. | Image: Dhanushka
   Madushan

--

   Leaf nodes include all values and all of the records are in sorted order.
   B+tree allows you to do the same search as B-tree, but it also allows you
   to  travel through all the values in a leaf node if we put a pointer to
   each leaf node as follows.

   Illustration of a B+tree with leaf node referencingIllustration of a
   B+tree with leaf node referencing. | Image: Dhanushka Madushan

    
--
How Is B-Tree Indexing Used in a Database?

   When B-tree comes to the database indexing, this data structure gets a
   little complicated because it doesn’t just have a key, it also has a value
   associated with the key. This value is a reference to the actual data
--
   each of the given records and converts the relevant rows into a byte
   stream. Then, it stores each of the keys and record byte streams on a
   B+tree. Here, the random index used as the key for indexing. The key and
   record byte stream is altogether known as Payload. The resulting B+tree
   could be represented as follows.

   A B+tree on database pagesA B+tree on database pages. | Image: Dhanushka
   Madushan

   Here you can see that all records are stored in the leaf nodes of the
   B+tree and index and are used as the key to create a B+tree. No records
   are stored on non-leaf nodes. Each of the leaf nodes references the next
   record in the tree. A database can perform a binary search by using the
   index or sequential search by searching through every element by only
   traveling through the leaf nodes.
--
   If no indexing is used, then the database reads each of these records to
   find the given record. When indexing is enabled, the database creates
   three B-trees for each of the columns in the table, as follows. Here the
   key is the B-tree key used to index. The index is the reference to the
   actual data record:

   B-tree used as an index to the actual recordB-tree used as an index to the
   actual record. | Image: Dhanushka Madushan

   When indexing is used first, the database searches a given key in
   correspondence to B-tree and gets the index in O(log(n)) time. Then, it
   performs another search in B+tree by using the already found index in
   O(log(n)) time and gets the record.

   Each of these nodes in B-tree and B+tree is stored inside the pages. Pages
   are fixed in size. Pages have a unique number starting from one. A page
   can be a reference to another page by using a page number. At the
--
Using SQLite B-Tree Indexing

   The basic syntax to create a B-tree index as follows:

 CREATE INDEX index_name ON table_name;
--
  1. Single Column Index

   Here, indexes are created based on one table column. Only a single B-tree
   is created for indexes. The syntax is as follows.

--

   This type of index can have multiple indexes. For each of the index
   columns, There exists a Btree. The following is the syntax for composite
   index:

--
   Unable to execute JavaScript. Try watching this video on www.youtube.com,
   or enable JavaScript if it is disabled in your browser.
   An introductory tutorial on B-tree indexes. | Video: Fullstack Academy

   More on Data ScienceWhat Is a Data Set?
--

   Databases should have an efficient way to store, read, and modify data.
   B-tree provides an efficient way to insert and read data. In actual
   database implementation, the database uses both B-tree and B+tree together
   to store data. B-tree used for indexing and B+tree used to store the
   actual records. B+tree provides sequential search capabilities in addition
   to the binary search, which gives the database more control to search
   non-index values in a database.
