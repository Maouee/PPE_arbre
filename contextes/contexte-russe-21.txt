   ru_vds 26 июн 2018 в 11:42

 Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация

   16 мин
--
   и безопасности
   Часть 13: Анимация средствами CSS и JavaScript
   Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и
   его оптимизация
   Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и
--
   представляем вашему вниманию перевод 14 части серии материалов об
   экосистеме JavaScript. А именно, речь пойдёт о синтаксическом анализе
   JS-кода, о том, как строятся абстрактные синтаксические деревья, и о том,
   как программист может повлиять на эти процессы, добившись повышения
   скорости работы своих приложений.
--
Как устроены языки программирования

   Прежде чем говорить об абстрактных синтаксических деревьях, остановимся на
   том, как устроены языки программирования. Вне зависимости от того, какой
   именно язык вы используете, вам всегда приходится применять некие
--
   (C#, Java, Rust), ваш код, представляющий собой обычный текст, всегда
   будет проходить этап парсинга, то есть — превращения обычного текста в
   структуру данных, которая называется абстрактным синтаксическим деревом
   (Abstract Syntax Tree, AST).

   Абстрактные синтаксические деревья не только дают структурированное
   представление исходного кода, они, кроме того, играют важнейшую роль в
   семантическом анализе, в ходе которого компилятор проверяет правильность
--
   генерирования байт-кода или машинного кода.

Применение абстрактных синтаксических деревьев

   Абстрактные синтаксические деревья используются не только в
   интерпретаторах и компиляторах. Они, в мире компьютеров, оказываются
   полезными и во многих других областях. Один из наиболее часто
--
   Например — Esprima и Acorn. Существуют и инструменты, которые могут помочь
   в работе с тем, что генерируют парсеры, а именно, в работе с абстрактными
   синтаксическими деревьями.

   Абстрактные синтаксические деревья, кроме того, широко используются при
   разработке транспиляторов. Предположим, вы решили разработать
   транспилятор, преобразующий код на Python в код на JavaScript. Подобный
   проект может быть основан на идее, в соответствии с которой используется
   транспилятор для создания абстрактного синтаксического дерева на основе
   Python-кода, которое, в свою очередь, преобразуется в код на JavaScript.
   Вероятно, тут вы зададитесь вопросом о том, как такое возможно. Всё дело в
   том, что абстрактные синтаксические деревья — это всего лишь
   альтернативный способ представления кода на некоем языке программирования.
   Прежде чем код преобразуется в AST, он выглядит как обычный текст, при
--
   содержит ту же информацию, что и исходный текст программы. В результате
   можно осуществить не только переход от исходного кода к AST, но и обратное
   преобразование, превратив абстрактное синтаксическое дерево в текстовое
   представление кода программы.

Парсинг JavaScript-кода

   Поговорим о том, как строятся абстрактные синтаксические деревья. В
   качестве примера рассмотрим простую JavaScript-функцию:

--
 }

   Парсер создаст абстрактное синтаксическое дерево, которое схематично
   представлено на следующем рисунке.

   Абстрактное синтаксическое дерево

   Обратите внимание на то, что это — упрощённое представление результатов
   работы парсера. Настоящее абстрактное синтаксическое дерево выглядит
   гораздо сложнее. В данном случае наша главная цель — получить
   представление о том, во что, в первую очередь, превращается исходный код
   прежде чем он будет выполнен. Если вам интересно взглянуть на то, как
   выглядит реальное абстрактное синтаксическое дерево — воспользуйтесь
   сайтом AST Explorer. Для того, чтобы сгенерировать AST для некоего
   фрагмента JS-кода, его достаточно поместить в соответствующее поле на
--
   обнаружить тело функции и сделать запись о её объявлении, но на этом
   работа заканчивается. Для такой функции не надо формировать абстрактное
   синтаксическое дерево, так как у системы нет сведений о том, что эту
   функцию планируется выполнять. Кроме того, не выделяется память из кучи,
   что обычно требует немалых системных ресурсов. Если в двух словах, то
